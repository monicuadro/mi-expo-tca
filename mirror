<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1.0" />
<title>Espejo AR — Prototipo</title>
<style>
  body{margin:0;font-family:system-ui;background:#111;color:#fff;display:flex;flex-direction:column;align-items:center}
  #stage{position:relative;width:360px;height:480px;margin-top:18px}
  video, canvas{position:absolute;left:0;top:0;width:100%;height:100%;object-fit:cover;border-radius:8px}
  #controls{margin-top:12px;display:flex;gap:8px;align-items:center}
  .btn{padding:8px 12px;border-radius:8px;border:none;background:#f2f2f2;color:#111;cursor:pointer}
</style>
</head>
<body>
<h3>Espejo AR — ajustá intensidad (por defecto 0)</h3>

<div id="stage">
  <video id="video" autoplay playsinline></video>
  <canvas id="out"></canvas>
</div>

<div id="controls">
  <label>Intensidad <input id="intensity" type="range" min="0" max="100" value="0"></label>
  <button id="start" class="btn">Iniciar (opt-in)</button>
  <button id="stop" class="btn">Salir / Restaurar</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.21.0/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/body-pix@2.0.5/dist/body-pix.min.js"></script>
<script>
(async function(){
  const video = document.getElementById('video');
  const out = document.getElementById('out');
  const intensity = document.getElementById('intensity');
  const startBtn = document.getElementById('start');
  const stopBtn = document.getElementById('stop');

  const W = 360, H = 480;
  out.width = W; out.height = H;

  let net = null, running=false, offCanvas = document.createElement('canvas');
  offCanvas.width = W; offCanvas.height = H;
  const offCtx = offCanvas.getContext('2d');
  const outCtx = out.getContext('2d');

  async function setupCamera(){
    const stream = await navigator.mediaDevices.getUserMedia({
      video:{facingMode:'user', width: W, height: H}, audio:false
    });
    video.srcObject = stream;
    await video.play();
  }

  async function loadModel(){
    net = await bodyPix.load({architecture:'MobileNetV1', outputStride:16, multiplier:0.5});
  }

  async function frameLoop(){
    if(!running) return;
    offCtx.save();
    offCtx.scale(-1,1);
    offCtx.drawImage(video, -W, 0, W, H);
    offCtx.restore();

    const segmentation = await net.segmentPerson(offCanvas, {internalResolution: 'medium', segmentationThreshold: 0.7});
    const mask = bodyPix.toMask(segmentation, {r:0,g:0,b:0,a:0}, {r:0,g:0,b:0,a:255});
    outCtx.clearRect(0,0,W,H);
    outCtx.globalAlpha = 0.4;
    outCtx.drawImage(offCanvas,0,0);
    outCtx.globalAlpha = 1.0;

    const maskCanvas = document.createElement('canvas');
    maskCanvas.width = W; maskCanvas.height = H;
    maskCanvas.getContext('2d').putImageData(mask,0,0);

    const temp = document.createElement('canvas');
    temp.width=W; temp.height=H;
    const tctx = temp.getContext('2d');
    tctx.drawImage(offCanvas,0,0);
    tctx.globalCompositeOperation = 'destination-in';
    tctx.drawImage(maskCanvas,0,0);

    const amp = parseFloat(intensity.value)/30;
    const slice = 6;
    for(let x=0; x<W; x+=slice){
      const dx = Math.round(Math.sin((x/20) + performance.now()/400) * amp*10);
      const col = tctx.getImageData(x,0,slice,H);
      outCtx.putImageData(col, x + dx, 0);
    }

    if(intensity.value > 1){
      outCtx.fillStyle = `rgba(200,100,150,${intensity.value/400})`;
      outCtx.fillRect(0,0,W,H);
    }

    requestAnimationFrame(frameLoop);
  }

  startBtn.onclick = async ()=>{
    if(running) return;
    await setupCamera();
    await loadModel();
    running = true;
    frameLoop();
  };
  stopBtn.onclick = ()=>{
    running = false;
    outCtx.clearRect(0,0,W,H);
    outCtx.save();
    outCtx.scale(-1,1);
    outCtx.drawImage(video, -W, 0, W, H);
    outCtx.restore();
  };
})();
</script>
</body>
</html>
